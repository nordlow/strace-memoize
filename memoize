#!/usr/bin/env python3

import sys
import os
import subprocess
import os.path
import re
import hashlib
import tempfile
import pickle                   # cPickle not available in Python3

import json

from pprint import pprint as pp
from getopt import getopt

from dbgio import dln

# if set use modification time instead of content-hash as indentity
OPT_USE_MODTIME = False

SYS_CALLS = ["open", "openat", "stat", "stat64", "statfs", "access"]
SYS_CALLS_AT = ["openat"]       # Linux

# content hashing algorithm
HASH_NAME = 'sha1'

RELEVANT_DIRS = ['.']


def memoizedRun(args, trace_childs=True):

    files_open = set()
    files_stat = set()
    files_access = set()

    with tempfile.NamedTemporaryFile() as out_file:

        # collect flags
        strace_flags = []
        if trace_childs:
            strace_flags.append('-f')
        outfile_flags = ['-o', out_file.name]
        sys_calls_flags = ['-e', 'trace=' + ','.join(SYS_CALLS + SYS_CALLS_AT)]
        strace_args = ['strace'] + strace_flags + outfile_flags + sys_calls_flags + args

        print("strace_args:", strace_args)

        ret = subprocess.run(args=strace_args, shell=False)

        print('of.name', out_file.name)

        out_file.seek(0)              # reset it
        for out_line in out_file:
            if b'ENOENT' not in out_line: # skip failing calls

                pid_, out_line = out_line.split(None, 1)

                pid = int(pid_) # decode PID integer
                # print(pid)

                try:
                    syscall, out_line = out_line.split(b'(', 1)
                    print(syscall)

                    syscall_fname, out_line = out_line.split(b', ', 1)
                    syscall_fname = syscall_fname[1:-1]

                    # in decreasing probability
                    if syscall == b'stat':
                        files_stat.add(syscall_fname)
                    elif syscall == b'open':
                        files_open.add(syscall_fname)
                    elif syscall == b'access':
                        files_access.add(syscall_fname)

                    print(pid, syscall, syscall_fname)
                except ValueError:
                    pass

        print('stat():')
        for file_stat in files_stat:
            print("  - " + bytes.decode(file_stat))

        print('open():')
        for file_open in files_open:
            print("  - " + bytes.decode(file_open))

        print('access():')
        for file_access in files_access:
            print("  - " + bytes.decode(file_access))

        return ret


if __name__ == '__main__':

    (opts, args) = getopt(sys.argv[1:], 'td:')

    for (opt, value) in opts:
        if opt == '-t':
            OPT_USE_MODTIME = True
        elif opt == '-d':
            RELEVANT_DIRS.append(value)

    completedProcess = memoizedRun(args)
    sys.exit(completedProcess.returncode)
