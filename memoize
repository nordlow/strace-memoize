#!/usr/bin/env python3

import sys
import os
import subprocess
import os.path
import re
import hashlib
import tempfile
import pickle                   # cPickle not available in Python3

import json

from pprint import pprint as pp
from getopt import getopt

# from dbgio import dln

# if set use modification time instead of content-hash as indentity
OPT_USE_MODTIME = False

SYS_CALLS = ["open", "openat", "stat", "stat64", "statfs", "access"]
SYS_CALLS_AT = ["openat"]       # Linux

# content hashing algorithm
HASH_NAME = 'md5'

RELEVANT_DIRS = ['.']


def _is_checkable_file_name(fname):
    return fname != b'/dev/urandom' and os.path.exists(fname)


def memoized_run(args, trace_childs=True):

    fnames_open_rdonly = set()
    fnames_open_wronly = set()
    fnames_open_rdwr = set()
    fnames_stat = set()
    fnames_access = set()

    with tempfile.NamedTemporaryFile() as out_file:

        # collect flags
        strace_flags = []
        if trace_childs:
            strace_flags.append('-f')
        outfile_flags = ['-o', out_file.name]
        sys_calls_flags = ['-e', 'trace=' + ','.join(SYS_CALLS + SYS_CALLS_AT)]
        strace_args = ['strace'] + strace_flags + outfile_flags + sys_calls_flags + args

        ret = subprocess.run(args=strace_args, shell=False)

        out_file.seek(0)              # reset it
        for out_line in out_file:
            if b'ENOENT' not in out_line: # skip failing calls

                pid_, out_line = out_line.split(None, 1)

                pid = int(pid_) # decode PID integer
                # print(pid)

                try:
                    syscall, out_line = out_line.split(b'(', 1)
                    syscall_s = bytes.decode(syscall)
                    # print(syscall_s)

                    syscall_fname, out_line = out_line.split(b', ', 1)
                    syscall_fname = syscall_fname[1:-1]

                    # in decreasing probability
                    if syscall == b'stat':
                        fnames_stat.add(syscall_fname)
                    elif syscall == b'open':
                        if out_line.startswith(b'O_RDONLY'): # read-only
                            fnames_open_rdonly.add(syscall_fname)
                        elif out_line.startswith(b'O_WRONLY'): # write-only
                            fnames_open_wronly.add(syscall_fname)
                        elif out_line.startswith(b'O_RDWR'): # read-write
                            fnames_open_rdwr.add(syscall_fname)
                        else:
                            assert(False)
                    elif syscall == b'access':
                        fnames_access.add(syscall_fname)
                    else:
                        print('Handle system call' + syscall_s)

                    # print(pid, syscall_s, syscall_fname)

                except ValueError:
                    pass

        print('stat():')
        for fname in sorted(fnames_stat, reverse=True):
            if _is_checkable_file_name(fname):
                print('  - "' + bytes.decode(fname) + '"')

        print('read-open():')
        for fname in sorted(fnames_open_rdonly, reverse=True):
            if _is_checkable_file_name(fname):
                mtime = os.path.getmtime(fname)
                if os.path.isdir(fname):
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime))
                else:
                    cdata = open(fname, 'rb').read()
                    chash = hashlib.new(HASH_NAME, cdata)
                    chash_s = ' ' + HASH_NAME + "=" + chash.hexdigest()
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime) + chash_s)
            else:
                print('  - "' + bytes.decode(fname) + '"')

        print('write-open():')
        for fname in sorted(fnames_open_wronly, reverse=True):
            if _is_checkable_file_name(fname):
                mtime = os.path.getmtime(fname)
                if os.path.isdir(fname):
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime))
                else:
                    cdata = open(fname, 'rb').read()
                    chash = hashlib.new(HASH_NAME, cdata)
                    chash_s = ' ' + HASH_NAME + "=" + chash.hexdigest()
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime) + chash_s)
            else:
                print('  - "' + bytes.decode(fname) + '"')

        print('read-write-open():')
        for fname in sorted(fnames_open_rdwr, reverse=True):
            if _is_checkable_file_name(fname):
                mtime = os.path.getmtime(fname)
                if os.path.isdir(fname):
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime))
                else:
                    cdata = open(fname, 'rb').read()
                    chash = hashlib.new(HASH_NAME, cdata)
                    chash_s = ' ' + HASH_NAME + "=" + chash.hexdigest()
                    print('  - "' + bytes.decode(fname) + '"' + ' mtime=' + str(mtime) + chash_s)
            else:
                print('  - "' + bytes.decode(fname) + '"')

        print('access():')
        for fname in sorted(fnames_access, reverse=True):
            if _is_checkable_file_name(fname):
                print('  - "' + bytes.decode(fname) + '"')

        return ret


if __name__ == '__main__':

    (opts, args) = getopt(sys.argv[1:], 'td:')

    for (opt, value) in opts:
        if opt == '-t':
            OPT_USE_MODTIME = True
        elif opt == '-d':
            RELEVANT_DIRS.append(value)

    completedProcess = memoized_run(args)
    sys.exit(completedProcess.returncode)
